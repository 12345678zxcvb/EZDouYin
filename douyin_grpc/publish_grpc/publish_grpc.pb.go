// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: publish.proto

package publish_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	ActionPublish_PublishAction_FullMethodName = "/publish_grpc.ActionPublish/PublishAction"
)

// ActionPublishClient is the client API for ActionPublish service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ActionPublishClient interface {
	PublishAction(ctx context.Context, in *DouYinPublishActionRequest, opts ...grpc.CallOption) (*DouYinPublishActionResponse, error)
}

type actionPublishClient struct {
	cc grpc.ClientConnInterface
}

func NewActionPublishClient(cc grpc.ClientConnInterface) ActionPublishClient {
	return &actionPublishClient{cc}
}

func (c *actionPublishClient) PublishAction(ctx context.Context, in *DouYinPublishActionRequest, opts ...grpc.CallOption) (*DouYinPublishActionResponse, error) {
	out := new(DouYinPublishActionResponse)
	err := c.cc.Invoke(ctx, ActionPublish_PublishAction_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ActionPublishServer is the server API for ActionPublish service.
// All implementations must embed UnimplementedActionPublishServer
// for forward compatibility
type ActionPublishServer interface {
	PublishAction(context.Context, *DouYinPublishActionRequest) (*DouYinPublishActionResponse, error)
	mustEmbedUnimplementedActionPublishServer()
}

// UnimplementedActionPublishServer must be embedded to have forward compatible implementations.
type UnimplementedActionPublishServer struct {
}

func (UnimplementedActionPublishServer) PublishAction(context.Context, *DouYinPublishActionRequest) (*DouYinPublishActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishAction not implemented")
}
func (UnimplementedActionPublishServer) mustEmbedUnimplementedActionPublishServer() {}

// UnsafeActionPublishServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ActionPublishServer will
// result in compilation errors.
type UnsafeActionPublishServer interface {
	mustEmbedUnimplementedActionPublishServer()
}

func RegisterActionPublishServer(s grpc.ServiceRegistrar, srv ActionPublishServer) {
	s.RegisterService(&ActionPublish_ServiceDesc, srv)
}

func _ActionPublish_PublishAction_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouYinPublishActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ActionPublishServer).PublishAction(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ActionPublish_PublishAction_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ActionPublishServer).PublishAction(ctx, req.(*DouYinPublishActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ActionPublish_ServiceDesc is the grpc.ServiceDesc for ActionPublish service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ActionPublish_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "publish_grpc.ActionPublish",
	HandlerType: (*ActionPublishServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishAction",
			Handler:    _ActionPublish_PublishAction_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "publish.proto",
}

const (
	ListPublish_PublishList_FullMethodName = "/publish_grpc.ListPublish/PublishList"
)

// ListPublishClient is the client API for ListPublish service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ListPublishClient interface {
	PublishList(ctx context.Context, in *DouYinPublishListRequest, opts ...grpc.CallOption) (*DouYinPublishListResponse, error)
}

type listPublishClient struct {
	cc grpc.ClientConnInterface
}

func NewListPublishClient(cc grpc.ClientConnInterface) ListPublishClient {
	return &listPublishClient{cc}
}

func (c *listPublishClient) PublishList(ctx context.Context, in *DouYinPublishListRequest, opts ...grpc.CallOption) (*DouYinPublishListResponse, error) {
	out := new(DouYinPublishListResponse)
	err := c.cc.Invoke(ctx, ListPublish_PublishList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ListPublishServer is the server API for ListPublish service.
// All implementations must embed UnimplementedListPublishServer
// for forward compatibility
type ListPublishServer interface {
	PublishList(context.Context, *DouYinPublishListRequest) (*DouYinPublishListResponse, error)
	mustEmbedUnimplementedListPublishServer()
}

// UnimplementedListPublishServer must be embedded to have forward compatible implementations.
type UnimplementedListPublishServer struct {
}

func (UnimplementedListPublishServer) PublishList(context.Context, *DouYinPublishListRequest) (*DouYinPublishListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method PublishList not implemented")
}
func (UnimplementedListPublishServer) mustEmbedUnimplementedListPublishServer() {}

// UnsafeListPublishServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ListPublishServer will
// result in compilation errors.
type UnsafeListPublishServer interface {
	mustEmbedUnimplementedListPublishServer()
}

func RegisterListPublishServer(s grpc.ServiceRegistrar, srv ListPublishServer) {
	s.RegisterService(&ListPublish_ServiceDesc, srv)
}

func _ListPublish_PublishList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouYinPublishListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ListPublishServer).PublishList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ListPublish_PublishList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ListPublishServer).PublishList(ctx, req.(*DouYinPublishListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// ListPublish_ServiceDesc is the grpc.ServiceDesc for ListPublish service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ListPublish_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "publish_grpc.ListPublish",
	HandlerType: (*ListPublishServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "PublishList",
			Handler:    _ListPublish_PublishList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "publish.proto",
}
