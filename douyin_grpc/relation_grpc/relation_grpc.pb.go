// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v4.23.4
// source: relation.proto

package relation_grpc

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FollowService_GiveFollow_FullMethodName = "/relation_grpc.FollowService/GiveFollow"
)

// FollowServiceClient is the client API for FollowService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FollowServiceClient interface {
	GiveFollow(ctx context.Context, in *DouYinRelationActionRequest, opts ...grpc.CallOption) (*DouYinRelationActionResponse, error)
}

type followServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFollowServiceClient(cc grpc.ClientConnInterface) FollowServiceClient {
	return &followServiceClient{cc}
}

func (c *followServiceClient) GiveFollow(ctx context.Context, in *DouYinRelationActionRequest, opts ...grpc.CallOption) (*DouYinRelationActionResponse, error) {
	out := new(DouYinRelationActionResponse)
	err := c.cc.Invoke(ctx, FollowService_GiveFollow_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowServiceServer is the server API for FollowService service.
// All implementations must embed UnimplementedFollowServiceServer
// for forward compatibility
type FollowServiceServer interface {
	GiveFollow(context.Context, *DouYinRelationActionRequest) (*DouYinRelationActionResponse, error)
	mustEmbedUnimplementedFollowServiceServer()
}

// UnimplementedFollowServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFollowServiceServer struct {
}

func (UnimplementedFollowServiceServer) GiveFollow(context.Context, *DouYinRelationActionRequest) (*DouYinRelationActionResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GiveFollow not implemented")
}
func (UnimplementedFollowServiceServer) mustEmbedUnimplementedFollowServiceServer() {}

// UnsafeFollowServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FollowServiceServer will
// result in compilation errors.
type UnsafeFollowServiceServer interface {
	mustEmbedUnimplementedFollowServiceServer()
}

func RegisterFollowServiceServer(s grpc.ServiceRegistrar, srv FollowServiceServer) {
	s.RegisterService(&FollowService_ServiceDesc, srv)
}

func _FollowService_GiveFollow_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouYinRelationActionRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowServiceServer).GiveFollow(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowService_GiveFollow_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowServiceServer).GiveFollow(ctx, req.(*DouYinRelationActionRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FollowService_ServiceDesc is the grpc.ServiceDesc for FollowService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FollowService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relation_grpc.FollowService",
	HandlerType: (*FollowServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GiveFollow",
			Handler:    _FollowService_GiveFollow_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relation.proto",
}

const (
	FollowListService_FollowList_FullMethodName = "/relation_grpc.FollowListService/FollowList"
)

// FollowListServiceClient is the client API for FollowListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FollowListServiceClient interface {
	FollowList(ctx context.Context, in *DouYinRelationFollowListRequest, opts ...grpc.CallOption) (*DouYinRelationFollowListResponse, error)
}

type followListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFollowListServiceClient(cc grpc.ClientConnInterface) FollowListServiceClient {
	return &followListServiceClient{cc}
}

func (c *followListServiceClient) FollowList(ctx context.Context, in *DouYinRelationFollowListRequest, opts ...grpc.CallOption) (*DouYinRelationFollowListResponse, error) {
	out := new(DouYinRelationFollowListResponse)
	err := c.cc.Invoke(ctx, FollowListService_FollowList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowListServiceServer is the server API for FollowListService service.
// All implementations must embed UnimplementedFollowListServiceServer
// for forward compatibility
type FollowListServiceServer interface {
	FollowList(context.Context, *DouYinRelationFollowListRequest) (*DouYinRelationFollowListResponse, error)
	mustEmbedUnimplementedFollowListServiceServer()
}

// UnimplementedFollowListServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFollowListServiceServer struct {
}

func (UnimplementedFollowListServiceServer) FollowList(context.Context, *DouYinRelationFollowListRequest) (*DouYinRelationFollowListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowList not implemented")
}
func (UnimplementedFollowListServiceServer) mustEmbedUnimplementedFollowListServiceServer() {}

// UnsafeFollowListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FollowListServiceServer will
// result in compilation errors.
type UnsafeFollowListServiceServer interface {
	mustEmbedUnimplementedFollowListServiceServer()
}

func RegisterFollowListServiceServer(s grpc.ServiceRegistrar, srv FollowListServiceServer) {
	s.RegisterService(&FollowListService_ServiceDesc, srv)
}

func _FollowListService_FollowList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouYinRelationFollowListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowListServiceServer).FollowList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowListService_FollowList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowListServiceServer).FollowList(ctx, req.(*DouYinRelationFollowListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FollowListService_ServiceDesc is the grpc.ServiceDesc for FollowListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FollowListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relation_grpc.FollowListService",
	HandlerType: (*FollowListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FollowList",
			Handler:    _FollowListService_FollowList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relation.proto",
}

const (
	FollowerListService_FollowerList_FullMethodName = "/relation_grpc.FollowerListService/FollowerList"
)

// FollowerListServiceClient is the client API for FollowerListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FollowerListServiceClient interface {
	FollowerList(ctx context.Context, in *DouYinRelationFollowerListRequest, opts ...grpc.CallOption) (*DouYinRelationFollowerListResponse, error)
}

type followerListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFollowerListServiceClient(cc grpc.ClientConnInterface) FollowerListServiceClient {
	return &followerListServiceClient{cc}
}

func (c *followerListServiceClient) FollowerList(ctx context.Context, in *DouYinRelationFollowerListRequest, opts ...grpc.CallOption) (*DouYinRelationFollowerListResponse, error) {
	out := new(DouYinRelationFollowerListResponse)
	err := c.cc.Invoke(ctx, FollowerListService_FollowerList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FollowerListServiceServer is the server API for FollowerListService service.
// All implementations must embed UnimplementedFollowerListServiceServer
// for forward compatibility
type FollowerListServiceServer interface {
	FollowerList(context.Context, *DouYinRelationFollowerListRequest) (*DouYinRelationFollowerListResponse, error)
	mustEmbedUnimplementedFollowerListServiceServer()
}

// UnimplementedFollowerListServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFollowerListServiceServer struct {
}

func (UnimplementedFollowerListServiceServer) FollowerList(context.Context, *DouYinRelationFollowerListRequest) (*DouYinRelationFollowerListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FollowerList not implemented")
}
func (UnimplementedFollowerListServiceServer) mustEmbedUnimplementedFollowerListServiceServer() {}

// UnsafeFollowerListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FollowerListServiceServer will
// result in compilation errors.
type UnsafeFollowerListServiceServer interface {
	mustEmbedUnimplementedFollowerListServiceServer()
}

func RegisterFollowerListServiceServer(s grpc.ServiceRegistrar, srv FollowerListServiceServer) {
	s.RegisterService(&FollowerListService_ServiceDesc, srv)
}

func _FollowerListService_FollowerList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouYinRelationFollowerListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FollowerListServiceServer).FollowerList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FollowerListService_FollowerList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FollowerListServiceServer).FollowerList(ctx, req.(*DouYinRelationFollowerListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FollowerListService_ServiceDesc is the grpc.ServiceDesc for FollowerListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FollowerListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relation_grpc.FollowerListService",
	HandlerType: (*FollowerListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FollowerList",
			Handler:    _FollowerListService_FollowerList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relation.proto",
}

const (
	FriendListService_FriendList_FullMethodName = "/relation_grpc.FriendListService/FriendList"
)

// FriendListServiceClient is the client API for FriendListService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FriendListServiceClient interface {
	FriendList(ctx context.Context, in *DouYinRelationFriendListRequest, opts ...grpc.CallOption) (*DouYinRelationFriendListResponse, error)
}

type friendListServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFriendListServiceClient(cc grpc.ClientConnInterface) FriendListServiceClient {
	return &friendListServiceClient{cc}
}

func (c *friendListServiceClient) FriendList(ctx context.Context, in *DouYinRelationFriendListRequest, opts ...grpc.CallOption) (*DouYinRelationFriendListResponse, error) {
	out := new(DouYinRelationFriendListResponse)
	err := c.cc.Invoke(ctx, FriendListService_FriendList_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FriendListServiceServer is the server API for FriendListService service.
// All implementations must embed UnimplementedFriendListServiceServer
// for forward compatibility
type FriendListServiceServer interface {
	FriendList(context.Context, *DouYinRelationFriendListRequest) (*DouYinRelationFriendListResponse, error)
	mustEmbedUnimplementedFriendListServiceServer()
}

// UnimplementedFriendListServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFriendListServiceServer struct {
}

func (UnimplementedFriendListServiceServer) FriendList(context.Context, *DouYinRelationFriendListRequest) (*DouYinRelationFriendListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FriendList not implemented")
}
func (UnimplementedFriendListServiceServer) mustEmbedUnimplementedFriendListServiceServer() {}

// UnsafeFriendListServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FriendListServiceServer will
// result in compilation errors.
type UnsafeFriendListServiceServer interface {
	mustEmbedUnimplementedFriendListServiceServer()
}

func RegisterFriendListServiceServer(s grpc.ServiceRegistrar, srv FriendListServiceServer) {
	s.RegisterService(&FriendListService_ServiceDesc, srv)
}

func _FriendListService_FriendList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DouYinRelationFriendListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FriendListServiceServer).FriendList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FriendListService_FriendList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FriendListServiceServer).FriendList(ctx, req.(*DouYinRelationFriendListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FriendListService_ServiceDesc is the grpc.ServiceDesc for FriendListService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FriendListService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "relation_grpc.FriendListService",
	HandlerType: (*FriendListServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FriendList",
			Handler:    _FriendListService_FriendList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "relation.proto",
}
